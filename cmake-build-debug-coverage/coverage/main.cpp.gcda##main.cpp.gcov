        -:    0:Source:/home/kali/CLionProjects/263Project/CPPAlgorithms/main.cpp
        -:    0:Graph:/home/kali/CLionProjects/263Project/cmake-build-debug-coverage/CMakeFiles/263Project.dir/CPPAlgorithms/main.cpp.gcno
        -:    0:Data:/home/kali/CLionProjects/263Project/cmake-build-debug-coverage/CMakeFiles/263Project.dir/CPPAlgorithms/main.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by kali on 11/22/22.
        -:    3://
        -:    4:
        -:    5:#include <iostream>
        -:    6:#include <cstdlib>
        -:    7:#include <chrono>
        -:    8:#include <sys/time.h>
        -:    9:#include <ctime>
        -:   10:#include "Sorts.h"
        -:   11:
        -:   12:using std::cout; using std::endl;
        -:   13:using std::chrono::duration_cast;
        -:   14:using std::chrono::system_clock;
        -:   15:
function main called 1 returned 100% blocks executed 96%
        1:   16:int main(int argc, const char *argv[]) {
        1:   17:    const int RUNS = 1000;
        -:   18:    int arr[1000];
        1:   19:    int *comparisons = new int[1];
        1:   19-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   20:
        -:   21:    long totalTime;
        1:   22:    std::chrono::time_point<system_clock, system_clock::duration> startTime;
        1:   23:    std::chrono::time_point<system_clock, system_clock::duration> endTime;
        -:   24:
        -:   25:    // ／(^ㅅ^)＼ BubbleSort Tests
        1:   26:    totalTime = 0;
     1001:   27:    for(int i = 0; i < RUNS; ++i) {
        1:   27-block  0
     1001:   27-block  1
branch  0 taken 1000
branch  1 taken 1 (fallthrough)
  1001000:   28:        for(int &j: arr) {
     1000:   28-block  0
  1001000:   28-block  1
branch  0 taken 1000000
branch  1 taken 1000 (fallthrough)
  1000000:   29:            j = rand() % 1000;
  1000000:   29-block  0
call    0 returned 1000000
        -:   30:        }
     1000:   31:        comparisons[0] = 0;
        -:   32:
     1000:   33:        startTime = std::chrono::high_resolution_clock::now();
     1000:   33-block  0
call    0 returned 1000
     1000:   34:        Sorts<int>::bubbleSort(arr, 1000);
call    0 returned 1000
     1000:   35:        endTime = std::chrono::high_resolution_clock::now();
call    0 returned 1000
     1000:   36:        totalTime += std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime).count();
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:   36-block  0
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:   36-block  1
call    6 returned 1000
    $$$$$:   36-block  2
        -:   37:    }
        -:   38:
        1:   39:    std::cout << "BubbleSort Average Time: " << (double)totalTime / RUNS << std::endl;
        1:   39-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   39-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   39-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        -:   40:
        -:   41://    // ／(^ㅅ^)＼ Insertion Sort Tests
        -:   42://    totalTime = 0;
        -:   43://    for(int i = 0; i < RUNS; ++i) {
        -:   44://        for(int &j: arr) {
        -:   45://            j = rand() % 1000;
        -:   46://        }
        -:   47://        comparisons[0] = 0;
        -:   48://
        -:   49://        startTime = std::chrono::high_resolution_clock::now();
        -:   50://        Sorts<int>::insertionSort(arr, 1000);
        -:   51://        endTime = std::chrono::high_resolution_clock::now();
        -:   52://        totalTime = std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - startTime).count();
        -:   53://    }
        -:   54://
        -:   55://    std::cout << "InsertionSort Average Time: " << (double)totalTime / RUNS << std::endl;
        -:   56:
        -:   57://    // ／(^ㅅ^)＼ ShellSort Times
        -:   58://    totalTime = 0;
        -:   59://    for(int i = 0; i < RUNS; ++i) {
        -:   60://        for(int &j: arr) {
        -:   61://            j = rand() % 1000;
        -:   62://        }
        -:   63://        comparisons[0] = 0;
        -:   64://
        -:   65://        startTime = std::chrono::high_resolution_clock::now();
        -:   66://        Sorts<int>::shellSort(arr, 1000);
        -:   67://        endTime = std::chrono::high_resolution_clock::now();
        -:   68://        totalTime = std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - startTime).count();
        -:   69://    }
        -:   70://
        -:   71://    std::cout << "ShellSort Average Time: " << (double)totalTime / RUNS << std::endl;
        -:   72:
        -:   73://    // ／(^ㅅ^)＼ RadixSort Times
        -:   74://    totalTime = 0;
        -:   75://    for(int i = 0; i < RUNS; ++i) {
        -:   76://        for(int &j: arr) {
        -:   77://            j = rand() % 1000;
        -:   78://        }
        -:   79://        comparisons[0] = 0;
        -:   80://
        -:   81://        startTime = std::chrono::high_resolution_clock::now();
        -:   82://        Sorts<int>::radixSort(arr, 1000);
        -:   83://        endTime = std::chrono::high_resolution_clock::now();
        -:   84://        totalTime = std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - startTime).count();
        -:   85://    }
        -:   86://
        -:   87://    std::cout << "RadixSort Average Time: " << (double)totalTime / RUNS << std::endl;
        -:   88:
        -:   89://    // ／(^ㅅ^)＼ MergeSort Times
        -:   90://    totalTime = 0;
        -:   91://    for(int i = 0; i < RUNS; ++i) {
        -:   92://        for(int &j: arr) {
        -:   93://            j = rand() % 1000;
        -:   94://        }
        -:   95://        comparisons[0] = 0;
        -:   96://
        -:   97://        startTime = std::chrono::high_resolution_clock::now();
        -:   98://        Sorts<int>::mergeSort(arr, 1000, 0, 1000);
        -:   99://        endTime = std::chrono::high_resolution_clock::now();
        -:  100://        totalTime = std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - startTime).count();
        -:  101://    }
        -:  102://
        -:  103://    std::cout << "MergeSort Average Time: " << (double)totalTime / RUNS << std::endl;
        -:  104:
        -:  105://    // ／(^ㅅ^)＼ QuickSort Times
        -:  106://    totalTime = 0;
        -:  107://    for(int i = 0; i < RUNS; ++i) {
        -:  108://        for(int &j: arr) {
        -:  109://            j = rand() % 1000;
        -:  110://        }
        -:  111://        comparisons[0] = 0;
        -:  112://
        -:  113://        startTime = std::chrono::high_resolution_clock::now();
        -:  114://        Sorts<int>::quickSortPivotFirst(arr, 0, 1000, comparisons);
        -:  115://        endTime = std::chrono::high_resolution_clock::now();
        -:  116://        totalTime = std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - startTime).count();
        -:  117://    }
        -:  118://
        -:  119://    std::cout << "QuickSort Average Time: " << (double)totalTime / RUNS << std::endl;
        -:  120:
        1:  121:    delete[] comparisons;
        1:  121-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  121-block  1
call    2 returned 1
        1:  122:}
        1:  122-block  0
        1:  122-block  1
